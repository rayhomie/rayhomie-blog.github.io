(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{395:function(t,e,s){"use strict";s.r(e);var a=s(42),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"cors跨域和反向代理："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cors跨域和反向代理："}},[t._v("#")]),t._v(" CORS跨域和反向代理：")]),t._v(" "),s("p",[t._v("参考资料：")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("跨域资源共享 CORS 详解"),s("OutboundLink")],1),t._v("---阮一峰")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000015597029",target:"_blank",rel:"noopener noreferrer"}},[t._v("不要再问我跨域的问题了"),s("OutboundLink")],1),t._v("---"),s("a",{attrs:{href:"https://segmentfault.com/u/t_co_b",target:"_blank",rel:"noopener noreferrer"}},[t._v("写Bug"),s("OutboundLink")],1),t._v("（思否）")]),t._v(" "),s("p",[t._v("出现跨域的根本原因是："),s("strong",[t._v("浏览器的同源策略")]),t._v("。")]),t._v(" "),s("p",[t._v("这是一种浏览器的安全机制，虽然不能完全避免恶意攻击成功，但是提高了攻击成本。涉及"),s("a",{attrs:{href:"https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSRF攻击方式"),s("OutboundLink")],1),t._v("，钓鱼网站（没有同源限制的"),s("code",[t._v("Dom")]),t._v("查询）等。")]),t._v(" "),s("p",[t._v("同源是指："),s("strong",[t._v("协议，端口，主机都相同才同源")]),t._v("。")]),t._v(" "),s("p",[t._v("为了本地演示跨域，我们需要：\n1.随便跑起一份前端代码（以下前端是随便跑起来的"),s("code",[t._v("vue")]),t._v("），地址是http://localhost:9099。\n2.随便跑起一份后端代码（以下后端是随便跑起来的"),s("code",[t._v("node koa2")]),t._v("），地址是http://localhost:9971。")]),t._v(" "),s("p",[t._v("此时域名的端口号不同，不同源，导致跨域。")]),t._v(" "),s("p",[t._v("既然浏览器提出了这种同源策略，保证安全，但是我们开发中又需求在不同源的情况（被信任的域名之间）进行请求"),s("code",[t._v("ajax")]),t._v("，需要怎么办到呢？下面我们就现在都流行过的跨域请求方式进行分析总结：")]),t._v(" "),s("ul",[s("li",[t._v("JSONP："),s("code",[t._v("img")]),t._v("和"),s("code",[t._v("script")]),t._v("标签中的"),s("code",[t._v("src")]),t._v("属性不限制跨域请求\n"),s("ul",[s("li",[t._v("在HTML标签里，一些标签比如script、img这样的获取资源的标签是没有跨域限制的，利用这一点，我们可以这样干。缺点是"),s("strong",[t._v("JSONP只能发GET请求")]),t._v("，因为本质上script加载资源就是GET")])])]),t._v(" "),s("li",[t._v("Form：标签提交不限制跨域请求")]),t._v(" "),s("li",[t._v("CORS：("),s("code",[t._v("Cross-origin resource sharing")]),t._v(")标准解决方案"),s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("跨域资源共享")]),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("反向代理proxy：使用代理"),s("strong",[t._v("请求转发")]),t._v("实现跨域请求")])]),t._v(" "),s("p",[t._v("我们这里详细讲解***CORS***来处理跨域的标准做法和***反向代理***来实现跨域请求")]),t._v(" "),s("h3",{attrs:{id:"cors跨域资源共享："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cors跨域资源共享："}},[t._v("#")]),t._v(" CORS跨域资源共享：")]),t._v(" "),s("p",[t._v("它允许浏览器向跨源服务器，发出"),s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("XMLHttpRequest")]),s("OutboundLink")],1),t._v("请求，从而克服了AJAX只能"),s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("同源"),s("OutboundLink")],1),t._v("使用的限制。")]),t._v(" "),s("p",[t._v("整个CORS通信过程，"),s("strong",[t._v("都是浏览器自动完成")]),t._v("，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。"),s("strong",[t._v("浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求")]),t._v("，但用户不会有感觉。")]),t._v(" "),s("p",[t._v("因此，实现CORS通信的"),s("strong",[t._v("关键是服务器")]),t._v("。只要服务器实现了CORS接口，就可以跨源通信。")]),t._v(" "),s("p",[t._v("浏览器将CORS请求分成两类："),s("strong",[t._v("简单请求")]),t._v("（simple request）和"),s("strong",[t._v("非简单请求")]),t._v("（not-so-simple request）。CORS中浏览器对这两种请求的处理，是不一样的。")]),t._v(" "),s("h4",{attrs:{id:"简单请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[t._v("#")]),t._v(" 简单请求")]),t._v(" "),s("p",[t._v("只要同时满足以下两大条件，就属于简单请求：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("请求方法是以下三种方法之一：")]),t._v(" "),s("ul",[s("li",[t._v("HEAD")]),t._v(" "),s("li",[t._v("GET")]),t._v(" "),s("li",[t._v("POST")])])]),t._v(" "),s("li",[s("p",[t._v("HTTP的请求头信息不超出以下几种字段：")]),t._v(" "),s("ul",[s("li",[t._v("Accept")]),t._v(" "),s("li",[t._v("Accept-Language")]),t._v(" "),s("li",[t._v("Content-Language")]),t._v(" "),s("li",[t._v("Last-Event-ID")]),t._v(" "),s("li",[t._v("Content-Type：只限于三个值"),s("code",[t._v("application/x-www-form-urlencoded")]),t._v("、"),s("code",[t._v("multipart/form-data")]),t._v("、"),s("code",[t._v("text/plain")])])])])]),t._v(" "),s("p",[t._v("这是为了"),s("strong",[t._v("兼容表单（form）")]),t._v("，因为历史上"),s("strong",[t._v("表单一直可以发出跨域请求")]),t._v("。AJAX 的跨域设计就是，"),s("strong",[t._v("只要表单可以发，AJAX 就可以直接发")]),t._v("。")]),t._v(" "),s("p",[t._v("凡是满足上面两个条件，就属于"),s("strong",[t._v("简单请求，CORS都是把它当成表单Form来处理这些简单的跨域请求")]),t._v("，来起到简化的作用。")]),t._v(" "),s("h5",{attrs:{id:"基本流程："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本流程："}},[t._v("#")]),t._v(" 基本流程：")]),t._v(" "),s("p",[t._v("对于简单请求，浏览器"),s("strong",[t._v("直接发出CORS请求")]),t._v("。浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，"),s("strong",[t._v("添加一个"),s("code",[t._v("Origin")]),t._v("字段")]),t._v("。")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language-http extra-class"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token request-line"}},[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("GET")]),t._v(" /cors HTTP/1.1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Origin:")]),t._v(" http://api.bob.com\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Host:")]),t._v(" api.alice.com\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Accept-Language:")]),t._v(" en-US\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Connection:")]),t._v(" keep-alive\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("User-Agent:")]),t._v(" Mozilla/5.0...\n")])])])]),t._v(" "),s("p",[t._v("上面的头信息中，"),s("code",[t._v("Origin")]),t._v("字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。"),s("strong",[t._v("服务器根据这个值，决定是否同意这次请求")]),t._v("。")]),t._v(" "),s("p",[t._v("浏览器发出携带"),s("code",[t._v("Origin")]),t._v("字段的请求后，服务器都会返回一个状态码为200正常的HTTP请求，区别在于：")]),t._v(" "),s("ul",[s("li",[t._v("如果"),s("code",[t._v("Origin")]),t._v("指定的源，不在许可范围内，服务器返回给浏览器的"),s("strong",[t._v("响应头信息没有包含"),s("code",[t._v("Access-Control-Allow-Origin")]),t._v("字段")]),t._v("，浏览器就发现出错了，从而抛出错误，被"),s("code",[t._v("XMLHttpRequest")]),t._v("的"),s("code",[t._v("onerror")]),t._v("回调函数捕获。这种错误无法通过状态码识别，因为HTTP响应的状态码有可能是200。")]),t._v(" "),s("li",[t._v("如果"),s("code",[t._v("Origin")]),t._v("指定的源，在许可范围内，服务器返回的"),s("strong",[t._v("响应会多出几个头信息字段")]),t._v("。如下：")])]),t._v(" "),s("blockquote",[s("div",{staticClass:"language-http extra-class"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Access-Control-Allow-Origin:")]),t._v(" http://api.bob.com\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Access-Control-Allow-Credentials:")]),t._v(" true\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Access-Control-Expose-Headers:")]),t._v(" FooBar\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Content-Type:")]),t._v(" text/html; charset=utf-8\n")])])]),s("p",[t._v("上面的头信息之中，有三个与CORS请求相关的字段，都"),s("strong",[t._v("以"),s("code",[t._v("Access-Control-")]),t._v("开头")]),t._v("。")]),t._v(" "),s("p",[t._v("（1）Access-Control-Allow-Origin（表示"),s("strong",[t._v("服务器允许的源地址列表")]),t._v("）")]),t._v(" "),s("p",[t._v("该字段是必须的。它的值要么是请求时"),s("code",[t._v("Origin")]),t._v("字段的值，要么是一个"),s("code",[t._v("*")]),t._v("，表示接受任意域名的请求。")]),t._v(" "),s("p",[t._v("（2）Access-Control-Allow-Credentials（表示发出"),s("strong",[t._v("响应的服务器是否允许浏览器发送cookie")]),t._v("）")]),t._v(" "),s("p",[t._v("该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。"),s("strong",[t._v("默认情况下（没有该字段的情况下），Cookie不包括在CORS请求之中")]),t._v("。设为"),s("code",[t._v("true")]),t._v("，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。"),s("strong",[t._v("这个值也只能设为"),s("code",[t._v("true")]),t._v("，如果服务器不要浏览器发送Cookie，删除该字段即可")]),t._v("。")]),t._v(" "),s("p",[t._v("（3）Access-Control-Expose-Headers")]),t._v(" "),s("p",[t._v("该字段可选。CORS请求时，"),s("code",[t._v("XMLHttpRequest")]),t._v("对象的"),s("code",[t._v("getResponseHeader()")]),t._v("方法只能拿到6个基本字段："),s("code",[t._v("Cache-Control")]),t._v("、"),s("code",[t._v("Content-Language")]),t._v("、"),s("code",[t._v("Content-Type")]),t._v("、"),s("code",[t._v("Expires")]),t._v("、"),s("code",[t._v("Last-Modified")]),t._v("、"),s("code",[t._v("Pragma")]),t._v("。如果想拿到其他字段，就必须在"),s("code",[t._v("Access-Control-Expose-Headers")]),t._v("里面指定。上面的例子指定，"),s("code",[t._v("getResponseHeader('FooBar')")]),t._v("可以返回"),s("code",[t._v("FooBar")]),t._v("字段的值。")])]),t._v(" "),s("h5",{attrs:{id:"withcredentials-属性："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#withcredentials-属性："}},[t._v("#")]),t._v(" "),s("code",[t._v("withCredentials")]),t._v(" 属性：")]),t._v(" "),s("p",[t._v("上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定"),s("code",[t._v("Access-Control-Allow-Credentials")]),t._v("字段：")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language-http extra-class"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Access-Control-Allow-Credentials:")]),t._v(" true\n")])])])]),t._v(" "),s("p",[t._v("另一方面，开发者必须在AJAX请求中"),s("strong",[t._v("打开"),s("code",[t._v("withCredentials")]),t._v("属性")]),t._v("。")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xhr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nxhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withCredentials "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。（"),s("strong",[t._v("注意：CORS请求中如果想要浏览器发送Cookie给服务器必须前后端都进行配置，否则无法正常发送接收")]),t._v("）")]),t._v(" "),s("p",[t._v("但是，如果省略"),s("code",[t._v("withCredentials")]),t._v("设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭"),s("code",[t._v("withCredentials")]),t._v("。")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("xhr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withCredentials "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("需要注意的是，"),s("strong",[t._v("如果要发送Cookie，"),s("code",[t._v("Access-Control-Allow-Origin")]),t._v("就不能设为星号，必须指定明确的、与请求网页一致的域名")]),t._v("。同时，"),s("strong",[t._v("Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传")]),t._v("，其他域名的Cookie并不会上传，且（跨源）原网页代码中的"),s("code",[t._v("document.cookie")]),t._v("也无法读取服务器域名下的Cookie。")]),t._v(" "),s("h5",{attrs:{id:"总结："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结："}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),s("ol",[s("li",[t._v("发现是跨域请求，浏览器自动请求头添加"),s("code",[t._v("Origin")]),t._v("字段，用于后端服务器验证。")]),t._v(" "),s("li",[t._v("服务器都会正常返回响应，状态码无法判断是否跨域请求成功，需要浏览器自动判断服务器返回的响应头信息中，是否有"),s("code",[t._v("Access-Control-Allow")]),t._v("字段。")]),t._v(" "),s("li",[t._v("如果需要CORS请求中使用Cookie，需要前端和后端同时设置"),s("code",[t._v("Credentials")]),t._v("，前端才会正常被设置cookie和发送cookie，后端才会正常给前端设置cookie和接收cookie。")]),t._v(" "),s("li",[t._v("如果要发送Cookie，"),s("code",[t._v("Access-Control-Allow-Origin")]),t._v("就不能设为星号，"),s("strong",[t._v("必须指定明确的、与请求网页一致的域名")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("Cookie依然遵循同源策略")]),t._v("，只有用本服务器域名设置的Cookie才会被浏览器发送。")])]),t._v(" "),s("h3",{attrs:{id:"反向代理："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向代理："}},[t._v("#")]),t._v(" 反向代理：")]),t._v(" "),s("p",[t._v("想一下，如果我们请求的时候还是用前端的域名，然后有个东西帮我们把这个请求转发到真正的后端域名上，不就避免跨域了吗？这时候，Nginx出场了。\nNginx配置")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 监听9099端口")]),t._v("\n    listen "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9099")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 域名是localhost")]),t._v("\n    server_name localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#凡是localhost:9099/api这个样子的，都转发到真正的服务端地址http://localhost:9871 ")]),t._v("\n    location ^~ /api "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        proxy_pass http://localhost:9871"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("前端就不用干什么事情了，除了写接口，也没后端什么事情了")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求的时候直接用回前端这边的域名http://localhost:9099，这就不会跨域，然后Nginx监听到凡是localhost:9099/api这个样子的，都转发到真正的服务端地址http://localhost:9871 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:9099/api/iframePost'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  method"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'POST'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  headers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Accept'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/json'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/json'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  body"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    msg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'helloIframePost'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Nginx转发的方式似乎很方便！但这种使用也是看场景的，如果后端接口是一个公共的API，比如一些公共服务获取天气什么的，前端调用的时候总不能让运维去配置一下Nginx，如果兼容性没问题（IE 10或者以上），CROS才是更通用的做法吧。")])])}),[],!1,null,null,null);e.default=n.exports}}]);