(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{363:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript-event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-event-loop"}},[t._v("#")]),t._v(" JavaScript Event Loop")]),t._v(" "),a("p",[t._v("大家可能都知道JavaScript这门语言是单线程的语言吧，应该学过前端的都知道这个知识吧。单线程也就是说"),a("strong",[t._v("同一时间只能做一件事情")]),t._v("。因为在JavaScript被设计出来的时候就是为了在浏览器上面运行，需要操作"),a("code",[t._v("dom")]),t._v("节点，如果是多个线程来操作"),a("code",[t._v("dom")]),t._v("节点的话，就会出现冲突的情况，如果需要解决冲突的话就要引入锁来实现，这样明显就变得很复杂了。JavaScript这门语言的设计者当成就是为了让它不那么复杂，所以就以单线程来设计它。")]),t._v(" "),a("p",[t._v("单线程就意味着"),a("strong",[t._v("所有任务需要排队，需要按步骤执行，前一步执行完了获取到了结果，后一步才会开始执行。"),a("strong",[t._v("这就是")]),t._v("阻塞")]),t._v("的")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 238")]),t._v("\n")])])]),a("p",[t._v("像上面这样，如果排队是因为计算量大，CPU忙不过来，倒也算了")]),t._v(" "),a("p",[t._v("但是，如果是网络请求就不合适。因为一个网络请求的资源什么时候返回是不可预知的，这种情况再排队等待就不明智了。")]),t._v(" "),a("p",[t._v("所以为了利用"),a("strong",[t._v("多核CPU")]),t._v("的计算能力，"),a("code",[t._v("HTML5")]),t._v("提出"),a("code",[t._v("Web Worker")]),t._v("标准，"),a("strong",[t._v("允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质")]),t._v("（只是引入了其他线程，协助JavaScript线程，完成需求）")]),t._v(" "),a("h2",{attrs:{id:"现在引入两个概念："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#现在引入两个概念："}},[t._v("#")]),t._v(" 现在引入两个概念：")]),t._v(" "),a("h4",{attrs:{id:"【同步】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【同步】"}},[t._v("#")]),t._v(" 【同步】")]),t._v(" "),a("p",[t._v("如果在"),a("strong",[t._v("函数返回的时候，调用者就能够得到预期结果")]),t._v("(即拿到了预期的返回值或者看到了预期的效果)，那么这个"),a("strong",[t._v("函数就是同步")]),t._v("的，执行是"),a("strong",[t._v("阻塞")]),t._v("的，需要上一步的得到结果之后才回去执行下一步。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sqrt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用执行，立即返回结果")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hi'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用执行，立即返回结果")]),t._v("\n")])])]),a("h4",{attrs:{id:"【异步】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【异步】"}},[t._v("#")]),t._v(" 【异步】")]),t._v(" "),a("p",[t._v("如果在函数返回的时候，调用者还不能够得到预期结果，而是需要在将来通过一定的手段(回调)得到，那么这个函数就是"),a("strong",[t._v("异步")]),t._v("的。（引入异步的目的就是为了实现"),a("strong",[t._v("非阻塞")]),t._v("）")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在上面的代码中，我们希望通过"),a("code",[t._v("fs.readFile")]),t._v("函数读取文件"),a("code",[t._v("foo.txt")]),t._v("中的内容，并打印出来。但是在"),a("code",[t._v("fs.readFile")]),t._v("函数返回时，我们期望的结果并不会发生，而是要等到文件全部读取完成之后。如果文件很大的话可能要很长时间。所以，"),a("code",[t._v("fs.readFile")]),t._v("函数是异步的。正是由于JavaScript是单线程的，而异步容易实现非阻塞，所以在JavaScript中对于耗时的操作或者时间不确定的操作，使用异步就成了必然的选择。")]),t._v(" "),a("p",[a("strong",[t._v("异步的方法都是JavaScript之外的外部提供的方法")]),t._v("，比如：")]),t._v(" "),a("p",[t._v("1、普通事件，如"),a("code",[t._v("click")]),t._v("、"),a("code",[t._v("resize")]),t._v("等")]),t._v(" "),a("p",[t._v("2、资源加载，如"),a("code",[t._v("load")]),t._v("、"),a("code",[t._v("error")]),t._v("等")]),t._v(" "),a("p",[t._v("3、定时器，包括"),a("code",[t._v("setInterval")]),t._v("、"),a("code",[t._v("setTimeout")]),t._v("等。")]),t._v(" "),a("h4",{attrs:{id:"【异步详解】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【异步详解】"}},[t._v("#")]),t._v(" 【异步详解】")]),t._v(" "),a("p",[t._v("一个异步过程包括两个要素："),a("strong",[t._v("注册函数")]),t._v("和"),a("strong",[t._v("回调函数")]),t._v("，其中"),a("strong",[t._v("注册函数用来发起异步过程，回调函数用来处理结果")]),t._v("（异步是为了"),a("strong",[t._v("实现非阻塞")]),t._v("）")]),t._v(" "),a("p",[t._v("比如下面的代码，"),a("code",[t._v("div.onclick")]),t._v("这个函数就是注册函数，而箭头函数"),a("code",[t._v("()=>{..}")]),t._v("是回调函数，在代码放到浏览器中执行的时候，会依次执行所有的代码**"),a("code",[t._v("onclick")]),t._v("这个注册函数会和同步函数一样执行达到注册的功能**，后面的同步代码依然继续执行，"),a("strong",[t._v("并不会受到阻塞")]),t._v("。然后当我们鼠标发起点击事件的时候，"),a("strong",[t._v("回调函数会在"),a("code",[t._v("js")]),t._v("主线程空闲的时候去执行。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("div"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onclick")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"我们再引入两个概念："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们再引入两个概念："}},[t._v("#")]),t._v(" 我们再引入两个概念：")]),t._v(" "),a("h4",{attrs:{id:"【调用栈】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【调用栈】"}},[t._v("#")]),t._v(" 【调用栈】")]),t._v(" "),a("p",[t._v("在了解调用栈之前我们先来了解下"),a("strong",[t._v("栈")]),t._v("：")]),t._v(" "),a("p",[a("strong",[t._v("栈")]),t._v("是临时存储空间，主要存储局部变量和函数调用。")]),t._v(" "),a("p",[a("strong",[t._v("基本类型数据")]),t._v("（"),a("code",[t._v("Number, Boolean, String, Null, Undefined, Symbol, BigInt")]),t._v("）保存在在"),a("strong",[t._v("栈内存")]),t._v("中。\n"),a("strong",[t._v("引用类型数据")]),t._v("保存在"),a("strong",[t._v("堆内存")]),t._v("中，引用数据类型的变量是一个指向堆内存中实际"),a("strong",[t._v("对象的引用")]),t._v("，存在栈中。")]),t._v(" "),a("blockquote",[a("p",[t._v("基本类型赋值，系统会为新的变量在栈内存中分配一个新值，这个很好理解。引用类型赋值，系统会为新的变量在栈内存中分配一个值，这个值仅仅是指向同一个对象的引用，和原对象指向的都是堆内存中的同一个对象。")])]),t._v(" "),a("p",[a("strong",[t._v("对于函数")]),t._v("，解释器创建了”"),a("strong",[t._v("调用栈")]),t._v("“来记录函数的调用过程。每调用一个函数，解释器就可以把该"),a("strong",[t._v("函数添加进调用栈")]),t._v("，解释器会为被添加进来的函数"),a("strong",[t._v("创建一个栈帧")]),t._v("（用来保存函数的局部变量以及执行语句）并立即执行。如果正在执行的函数还调用了其他函数，新函数会继续被添加进入调用栈。"),a("strong",[t._v("函数执行完成，对应的栈帧立即被销毁")]),t._v("。")]),t._v(" "),a("p",[t._v("栈虽然很轻量，在使用时创建，使用结束后销毁，但是不是可以无限增长的，被分配的调用栈空间被占满时，就会引起”栈溢出“的错误。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//很显然运行以上代码，会直接报错，栈溢出")]),t._v("\n")])])]),a("p",[t._v("为什么基本数据类型存储在栈中，引用数据类型存储在堆中？"),a("a",{attrs:{href:"https://segmentfault.com/a/1190000023162310",target:"_blank",rel:"noopener noreferrer"}},[t._v("想继续了解js内存管理和v8的垃圾回收"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://rayhomie.gitee.io/rayhomieblog/talktalk/eventloop/",target:"_blank",rel:"noopener noreferrer"}},[t._v("我在另一篇文章中提到过调用栈，有兴趣可以去看一看："),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200711181943470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyMTAzNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cosole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("我们拿以上的全同步函数来举个栗子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("入栈执行，\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("入栈执行，console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("出栈，\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("入栈执行，\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("入栈执行，console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("出栈，\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("出栈\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("入栈执行，console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("出栈，\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("func2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("出栈\n")])])]),a("h4",{attrs:{id:"【消息队列】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【消息队列】"}},[t._v("#")]),t._v(" 【消息队列】")]),t._v(" "),a("p",[t._v("​\t有些文章把"),a("strong",[t._v("消息队列称为任务队列")]),t._v("，或者叫"),a("strong",[t._v("事件队列")]),t._v("，总之是和异步任务相关的队列，可以确定的是，它是队列这种"),a("strong",[t._v("先入先出")]),t._v("的数据结构，和排队是类似的，哪个异步操作完成的早，就排在前面。不论异步操作何时开始执行（"),a("strong",[t._v("这个执行是指注册函数执行")]),t._v("），只要异步操作执行完成，就可以到消息队列中排队（"),a("strong",[t._v("这个消息就是指回调函数")]),t._v("），这样，"),a("strong",[t._v("主线程在空闲")]),t._v("的时候，就可以从消息队列中获取消息并执行（"),a("strong",[t._v("回调函数加入到消息队列，并执行")]),t._v("）")]),t._v(" "),a("h4",{attrs:{id:"【事件循环】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【事件循环】"}},[t._v("#")]),t._v(" 【"),a("a",{attrs:{href:"https://www.cnblogs.com/xiaohuochai/p/8527618.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("事件循环"),a("OutboundLink")],1),t._v("】")]),t._v(" "),a("p",[t._v("​\t下面来详细介绍事件循环。下图中，主线程运行的时候，产生堆和栈，栈中的代码调用"),a("strong",[t._v("各种外部API")]),t._v("（调用"),a("code",[t._v("webAPI")]),t._v("就是为了注册异步函数），异步操作执行完成后，就在消息队列中排队。"),a("strong",[t._v("只要栈中的同步代码执行完毕，主线程就会去读取消息队列，依次执行那些异步任务所对应的回调函数")]),t._v("。（创建消息队列就是为了解决实现"),a("strong",[t._v("非阻塞")]),t._v("）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200710102313699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyMTAzNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("从代码执行顺序的角度来看，程序最开始是按代码顺序执行代码的，遇到同步任务，立刻执行；遇到异步任务，则"),a("strong",[t._v("只是调用异步函数发起异步请求")]),t._v("。此时，"),a("strong",[t._v("异步任务开始执行异步操作，执行完成后（回调函数）到消息队列中排队")]),t._v("。程序按照代码顺序执行完毕后，查询消息队列中是否有等待的消息。如果有，则按照次序从消息队列中把消息放到执行栈中执行。执行完毕后，再从消息队列中获取消息，再执行，不断重复。")]),t._v(" "),a("p",[t._v("由于主线程不断的重复获得消息、执行消息、再取消息、再执行。所以，这种机制被称为"),a("strong",[t._v("事件循环")])]),t._v(" "),a("h2",{attrs:{id:"【宏任务与微任务】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【宏任务与微任务】"}},[t._v("#")]),t._v(" 【"),a("a",{attrs:{href:"https://www.cnblogs.com/ZavierTang/p/ZavierTang.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("宏任务与微任务"),a("OutboundLink")],1),t._v("】")]),t._v(" "),a("p",[t._v("以上机制在"),a("code",[t._v("ES5")]),t._v("的情况下够用了，但是"),a("code",[t._v("ES6")]),t._v("会有一些问题。我们来看一下下面这个Promise的例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'timer over'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Promise同样是用来处理异步的：")]),t._v("\nPromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'promise1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'promise2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// script start")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// script end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// promise1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// promise2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// timer over")]),t._v("\n")])])]),a("p",[t._v("如果按照刚才上面的消息队列调用的理解来说，应该是"),a("code",[t._v("setTimeout")]),t._v("中的"),a("code",[t._v("timie over")]),t._v("加入消息队列，然后是"),a("code",[t._v("promise1")]),t._v("、"),a("code",[t._v("promise2")]),t._v("依次加入消息队列等待执行。")]),t._v(" "),a("p",[t._v("但事实上并没有按照上面那样的顺序去执行。（"),a("strong",[t._v("创建promise后执行的异步任务完成返回的回调函数会被加入到微任务队列排队")]),t._v("，同步任务执行完毕的时候会"),a("strong",[t._v("立即去执行微任务")]),t._v("队列中的任务，然后再去执行消息队列中的任务。“"),a("strong",[t._v("优先级：同步任务>微任务队列>消息队列")]),t._v("”）")]),t._v(" "),a("p",[t._v("微任务队列是直接放在执行上下文栈的栈底，当上下文中的同步执行完毕之后马上执行微任务队列，然后才去加入消息队列。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200902183421107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyMTAzNg==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("这里有两个新概念："),a("strong",[a("code",[t._v("macrotask")]),t._v("（宏任务）")]),t._v(" 和 "),a("strong",[a("code",[t._v("microtask")]),t._v("（微任务）")]),t._v("。")]),t._v(" "),a("p",[t._v("所有任务分为 "),a("code",[t._v("macrotask")]),t._v(" 和 "),a("code",[t._v("microtask")]),t._v(":")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("macrotask")]),t._v("：主代码块、"),a("code",[t._v("setTimeout")]),t._v("、"),a("code",[t._v("setInterval")]),t._v("等（可以看到，事件队列中的每一个事件都是一个 "),a("code",[t._v("macrotask")]),t._v("，现在称之为宏任务队列）")]),t._v(" "),a("li",[a("code",[t._v("microtask：Promise")]),t._v("、"),a("code",[t._v("process.nextTick")]),t._v("等")])]),t._v(" "),a("p",[a("code",[t._v("JS")]),t._v("引擎线程首先执行主代码块。每次"),a("strong",[t._v("调用栈执行的代码")]),t._v("就是一个宏任务，包括消息队列(宏任务队列)中的，因为执行栈中的宏任务执行完会去取消息队列（宏任务队列）中的任务加入执行栈中，即同样是事件循环的机制。")]),t._v(" "),a("p",[t._v("在执行宏任务时遇到Promise等，会创"),a("strong",[t._v("建微任务")]),t._v("（.then()里面的回调），并加入到"),a("strong",[t._v("微任务队列")]),t._v("队尾。")]),t._v(" "),a("p",[a("code",[t._v("microtask")]),t._v("必然是在某个宏任务执行的时候创建的，而在下一个宏任务开始之前，浏览器会对页面重新渲染("),a("code",[t._v("task")]),t._v(" >> "),a("code",[t._v("渲染")]),t._v(" >> "),a("code",[t._v("下一个task")]),t._v("(从任务队列中取一个))。同时，在上一个宏任务执行完成后，渲染页面之前，会执行当前微任务队列中的所有微任务。")]),t._v(" "),a("p",[t._v("也就是说，在某一个"),a("code",[t._v("macrotask")]),t._v("执行完后，在重新渲染与开始下一个宏任务之前，就会将在它执行期间产生的所有"),a("code",[t._v("microtask")]),t._v("都执行完毕（在渲染前）。")]),t._v(" "),a("p",[t._v("这样就可以解释 "),a("code",[t._v('"promise 1" "promise 2"')]),t._v("在 "),a("code",[t._v('"timer over"')]),t._v(" 之前打印了。"),a("strong",[a("code",[t._v('"promise 1" "promise 2"')]),t._v("作为微任务加入到微任务队列中")]),t._v("，而 "),a("code",[t._v('"timer over"')]),a("strong",[t._v("做为宏任务加入到宏任务队列（消息队列）中")]),t._v("，它们同时在等待被执行，但是"),a("strong",[t._v("微任务队列中的所有微任务都会在开始下一个宏任务（消息队列）之前都被执行完")]),t._v("。（也就是同步任务>微任务队列>消息队列，可以这么理解）")]),t._v(" "),a("p",[t._v("在node环境下，"),a("code",[t._v("process.nextTick")]),t._v("的优先级高于"),a("code",[t._v("Promise")]),t._v("，也就是说：在宏任务结束后会先执行微任务队列中的"),a("code",[t._v("nextTickQueue")]),t._v("，然后才会执行微任务中的"),a("code",[t._v("Promise")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("执行机制")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("执行一个宏任务（栈中没有就从消息队列中获取）")]),t._v(" "),a("li",[t._v("执行过程中如果遇到创建微任务，就将它获取的结果回调函数的添加到微任务队列中")]),t._v(" "),a("li",[t._v("宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）")]),t._v(" "),a("li",[t._v("当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染")]),t._v(" "),a("li",[t._v("渲染完毕后，JS引擎线程继续，开始下一个宏任务（从宏任务（消息）队列中获取）")])]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript 是单线程语言，决定于它的设计最初是用来处理浏览器网页的交互。浏览器负责解释和执行 JavaScript 的线程只有一个（所有说是单线程），即JS引擎线程，但是浏览器同样提供其他线程，如：事件触发线程、定时器触发线程等。")]),t._v(" "),a("li",[t._v("异步一般是指：\n"),a("ul",[a("li",[t._v("网络请求")]),t._v(" "),a("li",[t._v("计时器")]),t._v(" "),a("li",[t._v("DOM事件监听")])])]),t._v(" "),a("li",[t._v("事件循环机制：\n"),a("ul",[a("li",[t._v("JS引擎线程会维护一个执行栈，同步代码会依次加入到执行栈中依次执行并出栈。")]),t._v(" "),a("li",[t._v("JS引擎线程遇到异步函数，会将异步函数交给相应的Webapi，而继续执行后面的任务。")]),t._v(" "),a("li",[t._v("Webapi会在条件满足的时候，将异步对应的回调加入到消息队列中，等待执行。")]),t._v(" "),a("li",[t._v("执行栈为空时，JS引擎线程会去取消息队列中的回调函数（如果有的话），并加入到执行栈中执行。")]),t._v(" "),a("li",[t._v("完成后出栈，执行栈再次为空，重复上面的操作，这就是事件循环(event loop)机制。")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);