(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{375:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js面对对象基础-原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js面对对象基础-原型链"}},[t._v("#")]),t._v(" JS面对对象基础--原型链")]),t._v(" "),a("p",[t._v('它没有"子类"和"父类"的概念，也没有"类"（class）和"实例"（instance）的区分，全靠一种很奇特的"'),a("strong",[t._v("原型链")]),t._v('"（prototype chain）模式，来实现继承。')]),t._v(" "),a("p",[t._v("我们先来回顾一下构造函数和原型模式组合创建实例对象：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//必须是使用prototype.属性来添加原型；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不能对prototype={}来对它重新赋值！！！")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'动物'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dog "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'狗'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'猫'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//{ name: '狗' } { name: '猫' }")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//动物 动物")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果new出来的实例对象本身上没有的属性，就会去创建时原型对象上面找该属性。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//所以这里访问到的是Animal上的原型上属性")]),t._v("\ndog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'犬科'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'猫科'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里就看做是：只是简单的向对象中添加一个属性")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//犬科 猫科")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此时new出来的实例对象本身上有了新赋的属性，就直接访问找了该属性，就不需要到原型对象上面找")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//动物")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//原型上的属性只能通过一下方式修改：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.实例访问原型对象修改")]),t._v("\ndog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'修了改原型属性'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//修了改原型属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2.构造函数访问原型对象修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'又修了改原型属性'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//又修了改原型属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3.构造函数中默认的prototype属性和原型对象中默认的constructor属性相互指向")]),t._v("\ndog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("__proto__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'又又修了改原型属性'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("species"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//又又修了改原型对象属性")]),t._v("\n")])])]),a("p",[t._v("关于"),a("code",[t._v("__proto__")]),t._v("隐式原型属性访问原型：")]),t._v(" "),a("p",[t._v("本来在实例对象访问自己原型对象的属性的时候，是需要带上"),a("code",[t._v("__proto__")]),t._v("的，在某写情况下可以省略；有些情况不能省略；")]),t._v(" "),a("ul",[a("li",[t._v("当原型链由下向上找属性的过程中，如果不同原型对象上具有"),a("strong",[t._v("相同的属性名")]),t._v("的属性，此时如果我们需要用原型对象处于原型链更上层的那个属性，我们就不能省略"),a("code",[t._v("__proto__")]),t._v("，因为在原型链由下至上找的过程中，找的第一个对应的属性名就停止了。")]),t._v(" "),a("li",[t._v("实例对象访问一个属性的全过程（原型链）：\n"),a("ul",[a("li",[t._v("1.先找自己本身对象空间中的属性，找到了停止；")]),t._v(" "),a("li",[t._v("2.如果没找到，使用"),a("code",[t._v("__proto__")]),t._v("找上一个原型对象，找到了停止；")]),t._v(" "),a("li",[t._v("3.如果没有找到继续，继续沿"),a("code",[t._v("__proto__")]),t._v("，由下至上地找，直到找到为止；")]),t._v(" "),a("li",[t._v("4.如果都没有对应的属性名，则返回"),a("code",[t._v("undefined")])]),t._v(" "),a("li",[t._v("注意：此过程"),a("code",[t._v("__proto__")]),t._v("可以省略。")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200807173508394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyMTAzNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),a("p",[t._v("由于所有的实例对象共享同一个"),a("code",[t._v("prototype")]),t._v("对象，那么从外界看起来，"),a("code",[t._v("prototype")]),t._v('对象就好像是实例对象的原型，而实例对象则好像"'),a("strong",[t._v("继承")]),t._v('"了'),a("code",[t._v("prototype")]),t._v("对象一样。所以JavaScript是通过原型链的机制来实现继承。")])])}),[],!1,null,null,null);s.default=e.exports}}]);