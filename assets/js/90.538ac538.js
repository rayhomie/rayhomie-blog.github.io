(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{436:function(n,e,t){"use strict";t.r(e);var a=t(42),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"arguments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[n._v("#")]),n._v(" Arguments")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200511172411910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyMTAzNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),n._v('\n一、简介\n了解arguments这个对象之前先来认识一下javascript的一些功能：\n其实Javascript并没有重载函数的功能，但是Arguments对象能够模拟重载。Javascrip中每个函数都会有一个Arguments对象实例arguments，它引用着函数的实参，可以用数组下标的方式"[]"引用arguments的元素。arguments.length为函数实参个数，arguments.callee引用函数自身。\nimage.png')]),n._v(" "),t("p",[n._v("image.png\narguments.callee与形参是一一映射")]),n._v(" "),t("p",[n._v("image.png\nimage.png\n二、特点\n1.arguments对象和Function是分不开的。")]),n._v(" "),t("p",[n._v("2.因为arguments这个对象不能显式创建。")]),n._v(" "),t("p",[n._v("3.arguments对象只有函数开始时才可用。")]),n._v(" "),t("p",[n._v("三、使用方法\n虽然arguments对象并不是一个数组（类数组），但是访问单个参数的方式与访问数组元素的方式相同")]),n._v(" "),t("p",[n._v("例如：\narguments[0],arguments[1],。。。arguments[n]； 在js中 不需要明确指出参数名，就能访问它们")]),n._v(" "),t("p",[n._v("例如：")]),n._v(" "),t("p",[n._v('function test() {\nvar s = "";\nfor (var i = 0; i < arguments.length; i++) {\nalert(arguments[i]);\ns += arguments[i] + ",";\n}\nreturn s;\n}\ntest("name", "age");')]),n._v(" "),t("p",[n._v("输出结果：\nname,age\n我们知道每一个对象都有自己的属性，arguments对象也不例外，首先arguments的访问犹如Array对象一样，用0到arguments.length-1来枚举每一个元素。下面我们来看看callee属性，返回正被执行的** Function** 对象，也就是所指定的 Function 对象的正文。callee 属性是 arguments 对象的一个成员，仅当相关函数正在执行时才可用。callee 属性的初始值就是正被执行的** Function** 对象。实现匿名的递归函数。代码如下：")]),n._v(" "),t("p",[n._v("var sum = function (n) {\nif (1 == n) {\nreturn 1;\n} else {\nreturn n + arguments.callee(n - 1); //6 5 4 3 2 1\n}\n}\nalert(sum(6));")]),n._v(" "),t("p",[n._v("输出结果：21\n通俗一点就是，arguments此对象大多用来针对同个方法多处调用并且传递参数个数不一样时进行使用。根据arguments的索引来判断执行的方法。")]),n._v(" "),t("p",[n._v("知识扩展：")]),n._v(" "),t("p",[n._v("当使用arguments进行函数传递时，有一些需要注意的点。例子如下：")]),n._v(" "),t("p",[n._v("var length = 10;\nfunction fn() {\nconsole.log(this.length);\n}")]),n._v(" "),t("p",[n._v("var obj = {\nmethod: function(fn) {\nfn();\narguments"),t("a",{attrs:{href:""}},[n._v("0")]),n._v(";\n}\n};")]),n._v(" "),t("p",[n._v("obj.method(fn, 1);")]),n._v(" "),t("p",[n._v("输出：10,2\n这里有2个需要注意的点。fn函数里面的this的指向：")]),n._v(" "),t("p",[n._v('1.第一个值为10，执行的是method里面的第一行"fn()",这里this指向的window。所以输出的值为最外层定义的length。')]),n._v(" "),t("p",[n._v('2.第二个值为2，执行的是method里面的第二行"arguments0"（arguments0 => fn() ），这里this执行的是arguments这个对象,所以输出值为arguments的长度')]),n._v(" "),t("p",[n._v("arguments 的用法和特性基本就是这么多了。可能callee属性用到的比较少。但是如果自己封装或者写一些js的时候 除了callee的东西基本都会用到。有不对的地方希望朋友们多多支出。大家共同进步。")]),n._v(" "),t("p",[n._v("传多个参数事可以直接用argument，比如求最大值：")]),n._v(" "),t("p",[n._v("function max() {\nvar max = arguments[0];\nconsole.log(arguments)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    for (val of arguments) {\n        if (val >= max) {\n            max = val;\n        }\n    }\n    return max;\n}\nvar maxValue = max('9', 1, 2, 4)\nconsole.log(maxValue)\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);