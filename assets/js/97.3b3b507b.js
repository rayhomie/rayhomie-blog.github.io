(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{443:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"为什么组件data必须用函数表达，深刻理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么组件data必须用函数表达，深刻理解"}},[t._v("#")]),t._v(" 为什么组件data必须用函数表达，深刻理解")]),t._v(" "),s("h2",{attrs:{id:"_1、首先我们做一个类比，如下代码："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、首先我们做一个类比，如下代码："}},[t._v("#")]),t._v(" 1、首先我们做一个类比，如下代码：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200320182704970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyMTAzNg==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),t._v("\n对三个不同的变量obj1，obj2，obj3进行赋值，并且都是调用方法abc()，也就是说创建了三个不一样的实例，所以返回的此方法返回的值，就被赋值给了不同的地址。\n因此这三个变量的内存地址是不同的，此时改变其中一个变量的值，其他两个变量的值是不会跟随发生改变的。")]),t._v(" "),s("h2",{attrs:{id:"_2、我们此时在做一个类比，如下图："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、我们此时在做一个类比，如下图："}},[t._v("#")]),t._v(" 2、我们此时在做一个类比，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200320184000481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyMTAzNg==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),t._v("\n我们首先声明一个常量obj(假设被储存在内存地址0x100)，再写一个函数abc()其返回值为刚刚定义的常量obj(返回的值指向地址0x100)。\n所以我们对三个变量obj1，obj2，obj3进行赋值abc(),都是指向0x100的地址，此时更改其中一个变量的值，我们就会发现其他两个变量的值也随之改变。如下图解释：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200320184710889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyMTAzNg==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),t._v(" "),s("h2",{attrs:{id:"_3、我们回过头来看当前组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、我们回过头来看当前组件"}},[t._v("#")]),t._v(" 3、我们回过头来看当前组件")]),t._v(" "),s("p",[t._v("当前组件为"),s("code",[t._v("<cpn>")]),t._v("，如果我们在实例中多次使用当前组件的话如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200320184746736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyMTAzNg==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),t._v(" "),s("p",[t._v("如果我们把组件里面的data改成一个对象的话，如下图：\n"),s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200320185011444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyMTAzNg==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),t._v("\ndata此时是一个对象，里面存放着很多数据，都是指向同一个地址。\n此时如果重复的使用相同的当前组件，每一个组件用的值都是从这个data:{}对象中取得（也就是说都是从同一个地址中取值），就对组件之间造成了相互干扰。\n"),s("strong",[t._v("同理，我们就可以知道组件中的data使用函数然后返回一个对象的话，就不会存在这个问题了，因为在创建不同组件的时候，会return出不同地址的对象，并不存在干扰组件之间的数据绑定之类的问题")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200417015902628.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyMTAzNg==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);